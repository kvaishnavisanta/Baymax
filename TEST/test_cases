---------------success test--------------------

test_index_route (__main__.TestMain) ... ok
test_create_personality(__main__.TestMain) ... ok
test_delete_personality (__main__.TestMain) ... ok
test_invalid_choice (__main__.TestMain) ... ok
test_unexpected_choice (__main__.TestMain) ... ok

----------------------------------------------------------------------
Ran 5 tests in 0.500s

Test results:
Successful: 5
Failures: 0
Errors: 0
Total duration: 0.500 seconds



--------------failure test case--------------------

.F.FF.
======================================================================
FAIL: test_empty_input (__main__.TestMain)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_main.py", line XX, in test_empty_input
    main()
AssertionError: ValueError not raised

======================================================================
FAIL: test_invalid_choice (__main__.TestMain)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_main.py", line XX, in test_invalid_choice
    self.assertEqual(mock_stdout.getvalue().strip(), "Invalid choice. Please choose again.")
AssertionError: '' != 'Invalid choice. Please choose again.'
- Invalid choice. Please choose again.
+ 

======================================================================
FAIL: test_unexpected_choice (__main__.TestMain)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test_main.py", line XX, in test_unexpected_choice
    self.assertEqual(mock_stdout.getvalue().strip(), "Unexpected choice. Please choose again.")
AssertionError: '' != 'Unexpected choice. Please choose again.'
- Unexpected choice. Please choose again.
+
----------------------------------------------------------------------
Ran 6 tests in 1.501s

FAILED (failures=3)



import pytest
import requests

BASE_URL = 'http://127.0.0.1:5000'

def test_index_route():
    response = requests.get(BASE_URL + '/')
    assert response.status_code == 200
    assert 'Welcome' in response.text  # Assuming 'Welcome' is part of your index page content

def test_create_personality_config():
    url = BASE_URL + '/'
    data = {
        'choice': '3',
        'personalityName': 'Test Personality',
        'personalityDescription': 'This is a test personality.'
    }
    response = requests.post(url, json=data)
    assert response.status_code == 200
    assert response.json()['success'] == True

def test_delete_personality_config():
    # Assuming you have a valid config_id to delete
    config_id = 'config_id'
    url = BASE_URL + '/'
    data = {
        'choice': '4',
        'deleteConfig': config_id
    }
    response = requests.post(url, json=data)
    assert response.status_code == 200
    assert response.json()['success'] == True

# Add more test cases for other functionalities



